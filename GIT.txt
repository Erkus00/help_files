1. Documentación oficial:

	https://git-scm.com/docs
	

2. Flujo de trabajo habitual y comandos básicos de Git.

	Nota: 
		"$~" representa un comando en la consola, 
		"[...]" representa un listado de opciones,
		"<...>" representa un nombre

	Para usar Git el flujo de trabajo suele ser el siguiente:
		
		1. Crear un repositorio.
		
			$~ git init

		2. Comprobar los cambios realizados y en qué rama estás.

			$~ git status

		3. Una vez que se han realizado cambios, se añaden al "workspace".

			$~ git add [* | filename | filename_1 filename_2]

		4. Firmar los cambios.

			$~ git commit -m "Mensaje para firmar los cambios"
			

4. Comandos básicos:

	· Crear una nueva rama.

		$~ git checkout -b <branch_name>

		O también:

		$~ git branch <branch_name>
		$~ git switch <branch_name>

	· Listar las ramas existentes.

		$~ git branch --list
		$~ git branch -l
			
	· Aplicar los cambios de una rama a otra.

		Vas a la rama "A", que va a recibir los cambios:

			$~ git switch <branch_A>

		Aplicas los cambios de la rama "B":

			$~ git merge <branch_B>

	· Eliminar una rama cuando ya no la necesitas.

		$~ git branch [-d | --delete | -D | --delete --force] <branch_name>

	. Limpiar una rama

		$~git rm -r * (Posteriormente hacer un commit y un pusheo)
		

	· Renombrar una rama.

		$~ git [-m | --move | -M | --move --force] <old_branch_name> <new_branch_name>

	· Enlazar un repositorio de GitHub
	
		$~ git remote add "origin" <URL>	adding.git   --> <remote>==origin	

	· Eliminar el repositorio enlazado
		
		$~ git remote rm "origin"

	· Subir los cambios a GitHub.  OJO --> Si no hay rama master, hay que crearla y mandar la info a esa. Tras eso, nos movemos la rama deseada y la enviamos. Si no, git se vuelve crazy

		$~ git push [-u | --set-upstream] <remote> <branch_name>

	·Ver URL asociada a un remote
	
		$~ git remote -v

	·Bajar rama de un repositorio
		
		$~ git fetch --all
		En caso de fatal: unable to access URL:
			$ git config --global --unset http.proxy 
			y si no 
			$ git config --global --unset https.proxy


		$~ git branch --set-upstream-to=<remote>/<branch_name> <git_branch_name>
		$~ git pull 
		$~ git pull --allow-unrelated-histories --> en caso de que de error
	
	· Bajar los cambios de GitHub.

		$~ git pull [-u | --set-upstream] <remote> <branch_name>

	. Si ya esta todo asociado (origen/<branch_name>)
		
		$~ git pull (Bajar)			
		$~ git push (Subir)
	
	· Bajar un único archivo de GitHub.

		$~ git fetch --all
		$~ git checkout <remote>/<remote_branch> -- <path>/<to>/<file>

	· Checkear los archivos de la carpeta de git (del PC)

		$~ git ls-files

	
	. Volver al commit anterior/deseado:
		
		(Anterior/Especifico) Borrando todo lo hecho: $~git reset --hard (commit code)
		(Anterior/Especifico) Manteniendo los cambios: $~git reset --soft (commit code)
		(Volviendo 'n' veces hacia atras) $~git reset --hard ~'n'
	
	. Editar un commit sin haber hecho un push 
		
		$~ git commit --amend

	. Trabajo con mergetool 

		https://stackoverflow.com/questions/161813/how-do-i-resolve-merge-conflicts-in-a-git-repository

	

	