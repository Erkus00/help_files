1. Documentación oficial:

	https://git-scm.com/docs

2. Configuracion de Git
	$ git config --global user.name "name" --> Establecer
	$ igt config --global user.name
	
	
		
	1. Crear un repositorio.
		
		$~ git init

	2. Comprobar los cambios realizados y en qué rama estás.

		$~ git status

	3. Una vez que se han realizado cambios, se añaden al "workspace".

		$~ git add [* | filename | filename_1 filename_2]

	4. Firmar los cambios.

		$~ git commit -m "Mensaje para firmar los cambios"
			

	· Crear una nueva rama.

		$~ git checkout -b <branch_name>

		O también:

		$~ git branch <branch_name>
		$~ git switch <branch_name>

	· Listar las ramas existentes.

		$~ git branch --list
		$~ git branch -l
			
	· Aplicar los cambios de una rama a otra.

		Vas a la rama "A", que va a recibir los cambios:

			$~ git switch <branch_A>

		Aplicas los cambios de la rama "B":

			$~ git merge <branch_B>

	· Eliminar una rama cuando ya no la necesitas.

		$~ git branch [-d | --delete | -D | --delete --force] <branch_name>

	. Limpiar una rama

		$~git rm -r * (Posteriormente hacer un commit y un pusheo)
		

	· Renombrar una rama.

		$~ git [-m | --move | -M | --move --force] <old_branch_name> <new_branch_name>

	· Enlazar un repositorio de GitHub
	
		$~ git remote add "origin" <URL>	adding.git   --> <remote>==origin	

	· Eliminar el repositorio enlazado
		
		$~ git remote rm "origin"

	· Subir los cambios a GitHub.  OJO --> Si no hay rama master, hay que crearla y mandar la info a esa. Tras eso, nos movemos la rama deseada y la enviamos. Si no, git se vuelve crazy

		$~ git push [-u | --set-upstream] <remote> <branch_name>

	·Ver URL asociada a un remote
	
		$~ git remote -v

	·Bajar rama de un repositorio
		
		$~ git fetch --all
		En caso de fatal: unable to access URL:
			$ git config --global --unset http.proxy 
			y si no 
			$ git config --global --unset https.proxy


		$~ git branch --set-upstream-to=<remote>/<branch_name> <git_branch_name>
		$~ git pull 
		$~ git pull --allow-unrelated-histories --> en caso de que de error
	
	· Bajar los cambios de GitHub.

		$~ git pull [-u | --set-upstream] <remote> <branch_name>

	. Si ya esta todo asociado (origen/<branch_name>)
		
		$~ git pull (Bajar)			
		$~ git push (Subir)
	
	· Bajar un único archivo de GitHub.

		$~ git fetch --all
		$~ git checkout <remote>/<remote_branch> -- <path>/<to>/<file>

	· Checkear los archivos de la carpeta de git (del PC)

		$~ git ls-files

	
	. Volver al commit anterior/deseado:
		
		(Anterior/Especifico) Borrando todo lo hecho: $~git reset --hard (commit code)
		(Anterior/Especifico) Manteniendo los cambios: $~git reset --soft (commit code)
		(Volviendo 'n' veces hacia atras) $~git reset --hard ~'n'
		
		Opciones que retroceden de commit pero no lo establecen. Simplemente permiten navegar por los mismos --> hasta hacer un checkout de la rama en cuestion 		que te devolverán a la situacion:
		
				# Para ir a un commit concreto utilizaremos su hash
					$~ git checkout [hash_commit]

				# Para ir n commits hacia atrás podemos utilizar esta sintaxis
					$~ git checkout HEAD~n
	
	. Editar un commit sin haber hecho un push 
		
		$~ git commit --amend

	. Trabajo con mergetool 

		https://stackoverflow.com/questions/161813/how-do-i-resolve-merge-conflicts-in-a-git-repository
		https://examples.javacodegeeks.com/software-development/git/git-mergetool-example/

	. Revisar los cambios antes de iniciar el  mergetool
		$~ git diff <branch A> <branch B>
		
	. Mirar listado de los ultimos commits
		$~ git log 
		
		#Listar y ver cambios introducidos en cada commit
		$~ git log -p 
		$~ git log <Opcion>=
		
	Opción			Descripción
	
	-(n)			Muestra solamente las últimas n confirmaciones
	--since, --after	Muestra aquellas confirmaciones hechas después de la fecha especificada.
	--until, --before	Muestra aquellas confirmaciones hechas antes de la fecha especificada.
	--author		Muestra sólo aquellas confirmaciones cuyo autor coincide con la cadena especificada.
	--committer		Muestra sólo aquellas confirmaciones cuyo confirmador coincide con la cadena especificada.
	-S			Muestra sólo aquellas confirmaciones que añaden o eliminen código que corresponda con la cadena especificada.
	
	
	Opción				Descripción
	
	-p				Muestra el parche introducido en cada confirmación.
	--stat				Muestra estadísticas sobre los archivos modificados en cada confirmación.
	--shortstat			Muestra solamente la línea de resumen de la opción --stat.
	--name-only			Muestra la lista de archivos afectados.
	--name-status			Muestra la lista de archivos afectados, indicando además si fueron añadidos, modificados o eliminados.
	--abbrev-commit			Muestra solamente los primeros caracteres de la suma SHA-1, en vez de los 40 caracteres de que se compone.
	--relative-date			Muestra la fecha en formato relativo (por ejemplo, “2 weeks ago” (“hace 2 semanas”)) en lugar del formato completo.
	--graph				Muestra un gráfico ASCII con la historia de ramificaciones y uniones.
	--pretty			Muestra las confirmaciones usando un formato alternativo. Posibles opciones son oneline, short, full, fuller y format (mediante el cual puedes especificar tu propio formato).
	
